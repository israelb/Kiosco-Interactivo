/** * VERSION: 1.0 * DATE: 2011-16-06 **/package  com.camaras{	/** * Slider is the base class for all Sliders and provides functionality and properties. You can use this class directly. *  * <b>Copyright 2011, Masfusion. All rights reserved.</b>  *  * @author Israel Barba, israel@masfusion.com */	import flash.display.MovieClip;		import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;		import flash.display.DisplayObject;	import com.camaras.Rectangle;	import com.camaras.ReadXML;	import com.camaras.player;	import com.camaras.textFieldDescription;	import com.camaras.WeakReference;		//Efectos	import com.greensock.*;	import com.greensock.easing.*;		import org.casalib.display.CasaMovieClip;	import org.casalib.events.LoadEvent;	import org.casalib.load.DataLoad;				public class Slider extends MovieClip {		/** @private space of the thumb **/		private var _thumbSpacer:Number = 10;		/** @private Movie Clip Container**/		private var _mc_container:MovieClip = new MovieClip();		/** @private Mask with the rectangle class**/		private var _myMask:Rectangle;  			/** @private MovieClip container of the button Previus**/		private var _backgroundButtonPrevius:MovieClip;			/** @private MovieClip container of the button Next**/		private var _backgroundButtonNext:MovieClip;			/** @private MovieClip button next**/		private var _btn_next:MovieClip;		private var _btnBack:MovieClip;		/** @private MovieClip button previus**/		private var _btn_previus:MovieClip;		/** @private with of the container thumb **/		private var _withContainer = 1400;		/** @private Save the Position X of the thumbs **/		private var _posX:Number;		/** @private  Position X of the first thumbs and the container **/		private var _posXClip:Number = 255;			/** @private  Save all positions in an array **/		private var _arrayPos:Array =  []; 		/** @private  Save all titles in an array **/		private var _arrayTitlesCamaras:Array =  new Array(); 		/** @private  Save all videos an array **/		private var _arrayVideoName:Array =  new Array(); 		/** @private  Save all titles in an array **/		private var _arrayDescriptionCamaras:Array =  new Array(); 		/** @private  Total of Thumbs **/		private var _totalThumbs:Number;		/** @private  Indicates the counter of thumbs **/		private var _countThumbs:Number = 0;				private var _position:Number = 0;				/** @private XML **/		private var _dataLoad:DataLoad;		private var _clusters:XML;		private var _totalNodes:Number = 0;		private var _arrayNombres:Array = new Array();		private var _isCluster:Boolean;		private var _nameFileXML:String;		private var _nameCluster:String;				private var _boton:MovieClip		private var _thumb:MovieClip;				private var my_player_fashion:player;		/** @private  Indicates total instances of videos **/		private var _clipsVideos:Array = [];				private var __reference:WeakReference;		private var __referent:*;						//Instancia del timeline		private var mc_container_intro:MovieClip; //<--una referencia al movieCLip del indice		private var mc_container_indide:MovieClip; //<--una referencia al movieCLip del indice		private var mc_container_ind:MovieClip; //<--una referencia al movieCLip de industrias		private var mc_container_camaras:MovieClip; //<--una referencia al movieCLip del indice					private var mc_bg_blue:MovieClip;						//Create the scenario		public function Slider(position:Number, nameFileXML:String = "caamara_moda.xml", nameCluster:String = "moda", isCluster:Boolean = true) {			super();						_isCluster = isCluster;			_position = position;			_nameFileXML = nameFileXML;			_nameCluster = nameCluster;			createSections();						trace("Que nombre esta activo: " + position)		}										/**		* @public		* Destroy all the objects and listeners for free memory		*		*/		public function destroy():void{			trace("DESTROY");			// remove all listeners here						_dataLoad.removeEventListener(LoadEvent.COMPLETE, _onCompleteReadXMLisCluster);			_btn_previus.removeEventListener(MouseEvent.MOUSE_DOWN, movePrevius);			_btn_next.removeEventListener(MouseEvent.MOUSE_DOWN, moveNext);				_btnBack.removeEventListener(MouseEvent.CLICK, back);												removeChild(_mc_container);			_mc_container.removeChild(_thumb);							removeChild(_myMask);						//remove all moviclips into thumb			while (_thumb.numChildren-1 > 0) {			   _thumb.removeChildAt(1);						}									//remove all moviclips into _mc_container			while (_mc_container.numChildren-1 > 0) {			   _mc_container.removeChildAt(1);						}									//delete array			_clipsVideos = []; 			__referent == undefined;						_backgroundButtonNext.removeChild(_btn_next);		    _backgroundButtonPrevius.removeChild(_btn_previus);			removeChild(_backgroundButtonPrevius);				removeChild(_backgroundButtonNext);						}				/**		* @public		* Close all the videos for free memory		*		*/		public function closeVideos():void{						for (var i:int = 0; i< _totalThumbs; i++) {				_clipsVideos[i].destroy();			}		}				/**		* @private		* Create a container for each section					*/				private function createSections():void{						if (_isCluster){				ReadXMLisCluster("clusters.xml");			}else{				ReadXMLisCluster(_nameFileXML); 			}									//Create the mask 			createMask();								}						/**		* @private		* Read the XML when are clusters		*		*  @param myXML this is a file xml 		*/		private function ReadXMLisCluster(myXML:String = "clusters.xml") {			_dataLoad = new DataLoad(myXML);			_dataLoad.addEventListener(LoadEvent.COMPLETE, _onCompleteReadXMLisCluster,false,0,true);			_dataLoad.start();		}						/**		* @private		* Parser the XML 		*		*  @param e This is an event LoadEvent		*/		private function _onCompleteReadXMLisCluster(e:LoadEvent):void {			//trace( _dataLoad.dataAsXml.toXMLString());			_clusters = new XML(_dataLoad.dataAsXml.toXMLString());			_totalNodes = _clusters.cluster.video.length();									//get the names of all camaras			for each(var nombre:XML in _clusters.cluster.nombre){								_arrayTitlesCamaras.push(nombre);			}							//get the videos of all camaras			for each(var nombreVideo:XML in _clusters.cluster.video){								_arrayVideoName.push(nombreVideo);			}								//If not is a cluster			if (_isCluster == false){									//Get descriptions of each camara				for each(var description:XML in _clusters.cluster.descripcion){									_arrayDescriptionCamaras.push(description);				}							}									//We rendering each thumb			rendering();		}						/**		* @private		* Rendering the carrousel with the information of the XML		*		*  @param 		*/		private function rendering() {			var cuenta:Number;						_mc_container.x = _posXClip;			_mc_container.y = 145;			addChild(_mc_container);									_totalThumbs = _arrayTitlesCamaras.length; //Total of thumbs of the XML								//Setup of each thumb			for (var i:int = 0; i< _totalThumbs; i++) {				_thumb =  new industria();				_btnBack = new btn_back(); //Create button back								_thumb.name = "thumb_holder_" + i;				_thumb.id = i;				_thumb.x = (_thumb.width + _thumbSpacer) * i ;				_thumb.titulo.text = _arrayTitlesCamaras[i];								_mc_container.addChild(_thumb);													_thumb.addChild(_btnBack);								_btnBack.x = 35;				_btnBack.y = 40;				_btnBack.addEventListener(MouseEvent.CLICK, back,false,0,true);								//Creating buttons or descriptions				if (_isCluster){										createButtonSectors(i);									}else{					createDescriptionCamaras(i);				}								//Instancia del timeline				/*var mc_container_intro:MovieClip = MovieClip(parent.parent.getChildByName("container_intro")); //<--una referencia al movieCLip del indice				var mc_container_indide:MovieClip = MovieClip(parent.parent.getChildByName("container_indice")); //<--una referencia al movieCLip del indice				var mc_container_ind:MovieClip = MovieClip(parent.parent.getChildByName("container_ind")); //<--una referencia al movieCLip de industrias				var mc_container_camaras:MovieClip = MovieClip(parent.parent.getChildByName("container_camaras")); //<--una referencia al movieCLip del indice							var mc_bg_blue:MovieClip = MovieClip(parent.parent.getChildByName("bg_degradado"));				*/								//Instancia del timeline				 mc_container_intro = MovieClip(parent.parent.getChildByName("container_intro")); //<--una referencia al movieCLip del indice				 mc_container_indide = MovieClip(parent.parent.getChildByName("container_indice")); //<--una referencia al movieCLip del indice				 mc_container_ind = MovieClip(parent.parent.getChildByName("container_ind")); //<--una referencia al movieCLip de industrias				 mc_container_camaras = MovieClip(parent.parent.getChildByName("container_camaras")); //<--una referencia al movieCLip del indice							 mc_bg_blue = MovieClip(parent.parent.getChildByName("bg_degradado"));								//Doing a player of video				__referent = new player(_arrayVideoName[i], 1000, 564, true, mc_bg_blue, mc_container_indide, mc_container_ind, mc_container_camaras, mc_container_intro);	 // ~1MB                __reference = new WeakReference(__referent);				__referent.x = 35;				__referent.y = 140;				__referent.name = "player_" + i;				_thumb.addChild(__referent); 								//Dynamic instance names, we save the current instance in a array				_clipsVideos[i] = __referent;										//set the position X of all the thumbs				if (i == 0){					_arrayPos.push( _posXClip );				}else{					cuenta = ( _withContainer * i) - ( _posXClip - ( _thumbSpacer * i) )  + 1 ;					_arrayPos.push( cuenta );									}											}							//Call the carrousel by number of position			moveThumb(_position);					}										/**		* @private		* Creating the buttons of each cluster		*		* @param number is the position of the camara in the matriz		*/		private function createButtonSectors(number:int):void{			   var ArraySectores =      [[ "Calzado", "Joyas", "Textil" ,"Vestido"],										[ "Alimentos", "Restaurantes", "Tequilera"],										[ "Cortiduria", "Madera", "Mueble Jalisco", "Mueble Ocotlán"],										[ "Hardware/software", "Maquiladora"],										[ "Construcción", "Vivienda", "Industrial"],										[ "Autotransportes", "Transporte privado", "Aduanas"],										[ "Artes gráficas", "Hule"] ];			   			    var ArrayNameSectores = [[ "calzado", "joyas", "textil" ,"vestido"],										[ "alimentos", "restaurantes", "tequilera"],										[ "cortiduria", "madera", "mueble", "mueble_ocotlan"],										[ "hardware", "maquiladora"],										[ "construcción", "vivienda", "industrial"],										[ "autotransportes", "transporte", "aduanas"],										[ "artes", "hule"] ];												var mc_container:MovieClip = new mc_continer_butons();				_thumb.addChild(mc_container);				mc_container.x = 1050;				mc_container.y = 139;								//Create a new movieclip container				var mc_botones:MovieClip = new MovieClip();				mc_container.addChild(mc_botones);				mc_botones.y = 110;								//Creating all the buttons				for(var k:int = 0; k<ArraySectores.length; k++){												for(var j:int = 0; j<ArraySectores[k].length; j++)						{						  																_boton = new btn_general_sector();							_boton.id = number;																					if ( ArrayNameSectores[number][j] != undefined ){								_boton.name = ArrayNameSectores[number][j];								mc_botones.addChild(_boton);																_boton.x = 40;													_boton.y = (_boton.height + 30) * j;																			_boton.titleBoton.text = ArraySectores[number][j];								_boton.addEventListener(MouseEvent.CLICK, goToCamara,false,0,true );							}													}				}		}				/**		* @private		* Creates descriptions the each camara		*		* @param number Pass the index for to create a textField		*/		private function createDescriptionCamaras(number:int):void{			var texto = new textFieldDescription(_arrayDescriptionCamaras[number], 305, 700);			texto.x = 1047;			texto.y = 140;			_thumb.addChild(texto);					}				/**		* @private		* Go to the camara		*		* @param e We pass the event currentTarget to the current boton 		*/		private function goToCamara(e:MouseEvent){			//trace("Click a la sigueinte camara: " + e.currentTarget.name);						//Close all the videos			for (var i:int = 0; i< _totalThumbs; i++) {				_clipsVideos[i].destroy();			}						_clipsVideos[_countThumbs].stopCurrentVideo();									MovieClip(root).accesar_camara(e.currentTarget.name);						}				/**		* @private		* Back to the index		*		*/		private function back(e:MouseEvent):void{						//References to the timeline 			var mc_container_indide:MovieClip = MovieClip(parent.parent.getChildByName("container_indice")); //<--una referencia al movieCLip del indice			var mc_container_ind:MovieClip = MovieClip(parent.parent.getChildByName("container_ind")); //<--una referencia al movieCLip de industrias			var mc_container_camaras:MovieClip = MovieClip(parent.parent.getChildByName("container_camaras")); //<--una referencia al movieCLip del indice			var mc_bg_blue:MovieClip = MovieClip(parent.parent.getChildByName("bg_degradado")); //<--una referencia al movieCLip del background 		     			 //Stop the current video			_clipsVideos[_countThumbs].stopCurrentVideo();											if (_isCluster){ //Back to the index					TweenMax.to(mc_bg_blue, 4, { alpha:0} ); 				TweenMax.to(mc_container_ind, 1, {y:1086});				TweenMax.to(mc_container_indide, 2, {y:0, onComplete:deleteClusters  });			}else{ //Back to the clusters 					 if ( _nameCluster != "sin"){ //If the camara have a cluster relationship					 TweenMax.to(mc_bg_blue, 4, { alpha:0}); 					 TweenMax.to(mc_container_camaras, 1, {y:1086 });					 TweenMax.to(mc_container_ind, 2, {y:0});								 backToCluster()				 }else{ //If the camara don't have any cluster					 TweenMax.to(mc_bg_blue, 4, { alpha:0}); 					 TweenMax.to(mc_container_camaras, 1, {y:2160 });					 TweenMax.to(mc_container_ind, 2, {y:1086 });							 TweenMax.to(mc_container_indide, 3, {y:0, onComplete:deleteCamaras  });				 }			}															}				/**		* @private		* Back to the last cluster, access to a class from timeline call to the function 		*		*/		private function backToCluster() : void { 				    			MovieClip(root).accesar_industria(_nameCluster);					deleteCamaras();		}						private function deleteClusters() : void { 			MovieClip(root).deleteClusters();		 		}				private function deleteCamaras() : void { 			MovieClip(root).deleteCamaras();		 		}				/**		* @private		* Set the position of the thumb selected		*		*  @param position By default is 0, this parameter allows you pass the position of a thumb.		*/		private function moveThumb(position:Number):void{			_countThumbs = position;						//Create the buttons			createButtonPrevius();			createButtonNext(_countThumbs);						if ( _countThumbs == 0){				_posX =  _arrayPos[ _countThumbs ] ; //Positive				TweenLite.to(_mc_container, 1, {x: _posX });				_backgroundButtonPrevius.alpha = 0;				}else{				_posX = - _arrayPos[ _countThumbs ] ; //Negative				TweenLite.to(_mc_container, 1, {x: _posX });			}							if (_countThumbs <= _totalThumbs){					_backgroundButtonNext.titulo.text = _arrayTitlesCamaras[_countThumbs + 1];				_backgroundButtonPrevius.titulo.text = _arrayTitlesCamaras[_countThumbs -1 ];								if (_countThumbs == _totalThumbs  ){					_backgroundButtonPrevius.alpha = 0;							_backgroundButtonNext.alpha = 0;				}							}		}				/**		* @private		* Create button Previus  ----->		*  		*/		private function createButtonPrevius():void{			_backgroundButtonPrevius = new bg_btn_controlSlider();			_btn_previus = new btn_previus_slider();			_backgroundButtonPrevius.x = 1690;			_backgroundButtonPrevius.y = 400;			_btn_previus.x = 15;			_btn_previus.y = 20;						addChild(_backgroundButtonPrevius);						_backgroundButtonPrevius.addChild(_btn_previus);			_btn_previus.addEventListener(MouseEvent.MOUSE_DOWN, movePrevius,false,0,true);					}				/**		* @private		* Create button next  <------		*  		*  @param position By default is 0, this parameter allows you pass the position of a thumb for to do a conditional.		*/				private function createButtonNext(position:Number=0):void{						_backgroundButtonNext = new bg_btn_controlSlider();			 _btn_next = new btn_next_slider();			_backgroundButtonNext.x = 20;			_backgroundButtonNext.y = 400;			_btn_next.x = 15;			_btn_next.y = 20;								if( position == _totalThumbs -1){				_backgroundButtonNext.alpha = 0;			}									addChild(_backgroundButtonNext);						_backgroundButtonNext.addChild(_btn_next);			_btn_next.addEventListener(MouseEvent.MOUSE_DOWN, moveNext,false,0,true);					}								//Event button Next   <----		private function moveNext(e:MouseEvent):void{							//Dynamic instance names, we pause the current video			_clipsVideos[_countThumbs].stopCurrentVideo();						_countThumbs += 1;			//trace("_countThumbs in Next: " + _countThumbs)			if (_countThumbs <= _totalThumbs -1 ){				//Move the carrousel				_posX = - _arrayPos[ _countThumbs] ;				TweenLite.to(_mc_container, 1, {x: _posX });				trace("_posX posicion --->" + _posX);							//Change the titles of the buttons				_backgroundButtonNext.titulo.text = _arrayTitlesCamaras[_countThumbs + 1];				_backgroundButtonPrevius.titulo.text = _arrayTitlesCamaras[_countThumbs - 1];				_backgroundButtonPrevius.alpha = 1;						_backgroundButtonNext.alpha = 1;				//limit of carrousel				if(_countThumbs == _totalThumbs -1){										_backgroundButtonNext.alpha = 0;					_backgroundButtonPrevius.alpha = 1;					}			}else{				trace("Full next")				_backgroundButtonNext.alpha = 0;				_backgroundButtonPrevius.alpha = 1;								_countThumbs = _totalThumbs -1;			}					}				//Event button Previus  --->		private function movePrevius(e:MouseEvent):void{				//Dynamic instance names, we pause the current video			_clipsVideos[_countThumbs].stopCurrentVideo();						_countThumbs -= 1;			//trace("_countThumbs in Previus: " + _countThumbs)									if (_countThumbs >= 0  ){						//Change the titles of the buttons				_backgroundButtonNext.titulo.text = _arrayTitlesCamaras[_countThumbs + 1];				_backgroundButtonPrevius.titulo.text = _arrayTitlesCamaras[_countThumbs - 1];								//limit of carrousel				if(_countThumbs == 0){					//Move the carrousel					_posX =  _arrayPos[ _countThumbs] ;					TweenLite.to(_mc_container, 1, {x:_posX});						_backgroundButtonNext.alpha = 1;					_backgroundButtonPrevius.alpha = 0;					}else{					//Move the carrousel					_posX = - _arrayPos[ _countThumbs] ;					TweenLite.to(_mc_container, 1, {x:_posX});						trace("_posX posicion --->" + _posX)					_backgroundButtonPrevius.alpha = 1;							_backgroundButtonNext.alpha = 1;									}			}else{				trace("Full previus")				_backgroundButtonNext.alpha = 1;								_backgroundButtonPrevius.alpha = 0;				_countThumbs = 0;			}					}						/**		* @private		* Create a mask in the container 		*  		*/					private function createMask():void{			            _myMask = new Rectangle(_posXClip, 143, 1402, 823);              addChild(_myMask); 			_mc_container.mask = _myMask; 			 		}	}	}