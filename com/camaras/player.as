package  com.camaras{	import com.camaras.textField;		import flash.display.DisplayObject;    import flash.display.MovieClip;	    import flash.display.Sprite;	    //import flash.events.*;	    import flash.media.Video;	    import flash.net.NetConnection;    import flash.net.NetStream;		import flash.media.SoundTransform;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;		//Efectos	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.*;		public class player extends MovieClip{				private var _connect_nc:NetConnection = new NetConnection();				private var _video:Video;				private var _mySound:SoundTransform;				private var _nsStream:NetStream;				private var _heightVideo:int;		private var _widthVideo:int;		private var _videoName:String;		private var _btn_playVideo:btn_play;				private var _texto:textField;		private var _square:Sprite 		private var _btn_repetir:MovieClip;		private var _btn_regresar:MovieClip;		private var _mc_alerta:MovieClip;						private var _mc_bg_blue:MovieClip;		private var _mc_container_indide:MovieClip;		private var _mc_container_ind:MovieClip;		private var _mc_container_camaras:MovieClip;		private var _mc_container_intro:MovieClip;				private var _timer:Timer;		private const SECONDS:Number = 15;		private const SECOND_START_COUNT_DOWN:Number = 10;		private var VOLUME:Number = .5;				//public var _isVideoFinish:Boolean = false;						/**		 * Constructor	 		 * 		 * @param videoName The name of video		 * @param w	The width of the video		 * @param h The height of the video		 * @param isPauseVideo If the video starts with pause		 */		public function player(videoName:String, w:int, h:int, isPauseVideo:Boolean, bg:MovieClip, containerIndice:MovieClip, containerIndustria:MovieClip, containerCamaras:MovieClip, containerIntro:MovieClip) {				//public function player(videoName:String, w:int, h:int, isPauseVideo:Boolean) {					//MovieClips timeline						_mc_bg_blue = bg;			_mc_container_indide =containerIndice;			_mc_container_ind = containerIndustria;			_mc_container_camaras = containerCamaras;			_mc_container_intro = containerIntro;									_videoName = videoName			_heightVideo = h;			_widthVideo = w;			_connect_nc.connect(null);						_nsStream = new NetStream(_connect_nc);						var customClient:Object = new Object();			 							_nsStream.client = customClient;			_nsStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler,false,0,true);						_video = new Video();						_video.attachNetStream(_nsStream);									// pause netstream, set time position to zero			if(isPauseVideo == true){				_nsStream.play(videoName);				_nsStream.pause();				_nsStream.seek(0);			}else{				_nsStream.play(videoName);			}					//Sound			_mySound = _nsStream.soundTransform;			_mySound.volume = VOLUME;			_nsStream.soundTransform = _mySound;										sizeVideo(w,h)			addChild(_video);			craeteRectangle();							//Add buttom play			addBtnPlay();						//Add text			//_texto = new textField(description ,_widthVideo, _heightVideo);			//addChild(_texto);					}				public function destroy():void{						trace("DESTROY() IN PLAYER")			_nsStream.close();						_connect_nc.close();			_square.removeEventListener(MouseEvent.MOUSE_DOWN, pauseVideo);			//_btn_playVideo.removeEventListener(MouseEvent.MOUSE_DOWN, resumeVideo);			//_btn_repetir.removeEventListener(MouseEvent.MOUSE_DOWN, repeatVideo);			//_btn_regresar.removeEventListener(MouseEvent.MOUSE_DOWN, goIntro);			stage.removeEventListener(MouseEvent.MOUSE_MOVE,timerONmouse); 			// _timer.removeEventListener(TimerEvent.TIMER_COMPLETE, mouseInactive);			 //_timer.removeEventListener(TimerEvent.TIMER, countDown);								}				//Create a rectangle that works like a pause button		private function craeteRectangle():void{			_square = new Sprite();			addChild(_square);						_square.graphics.beginFill(0x0000FF,0);			_square.graphics.drawRect(0,0,_widthVideo,_heightVideo);			_square.graphics.endFill();			_square.addEventListener(MouseEvent.MOUSE_DOWN, pauseVideo,false,0,true);		}						//Add buttom of the library		private function addBtnPlay():void{						_btn_playVideo = new btn_play();			_btn_playVideo.buttonMode = true;			_btn_playVideo.useHandCursor = true;			_btn_playVideo.x = (_widthVideo / 2);			_btn_playVideo.y = (_heightVideo / 2);			addChild(_btn_playVideo);			_btn_playVideo.addEventListener(MouseEvent.MOUSE_DOWN, resumeVideo,false,0,true);					}						//Resume the video		private function resumeVideo(event:MouseEvent):void{			trace("RESUME vIDEO!!!!");			removeChild(_btn_playVideo);						//_nsStream.seek(0);			_nsStream.resume();		}						//Pause the video		private function pauseVideo(event:MouseEvent):void{						_nsStream.pause();			addChild(_btn_playVideo);			//addChild(_texto);		}				//Stops the current video when there are an event on the butons next and previus on the carrousel slider		public function stopCurrentVideo():void{			trace("current video pause!!!");							//_nsStream.play(_videoName);			_nsStream.pause();			_nsStream.seek(0);			addChild(_btn_playVideo);		}				//Repeat the video		private function repeatVideo(e:MouseEvent):void{			deleteTimer();				_nsStream.seek(0);				removeChild(_btn_repetir);			removeChild(_btn_regresar);					removeChild(_mc_alerta);							_square.addEventListener(MouseEvent.MOUSE_DOWN, pauseVideo,false,0,true);		}				//Go to the intro		private function goIntro(e:MouseEvent):void{					_nsStream.close();			deleteTimer();				goToIntroEfects();					}						//Effects for move the movie clips		private function goToIntroEfects():void{			TweenMax.to(_mc_bg_blue, 4, { alpha:0}); 			TweenMax.to(_mc_container_camaras, 2.5, {y:3240});			TweenMax.to(_mc_container_ind, 3.5, {y:2160});			TweenMax.to(_mc_container_indide, 4.5, {y:1086});			TweenMax.to(_mc_container_intro, 5, {y:0, alpha:1 });			MovieClip(root).playVideos(); //Start de video of the intro			MovieClip(root).deleteClusters();			MovieClip(root).deleteCamaras();			//_isVideoFinish = true;		}						//Size of the video		private function sizeVideo(w:int, h:int):void{								_video.width = w;			_video.height = h;					}				//Show the butons to the final		private function showButons():void{			var espacio:Number = 40;						_btn_repetir = new mc_repetir_video();			_btn_regresar = new mc_regresar_intro();			_mc_alerta = new mc_alerta_video();						//center buttons			_btn_repetir.x = ( _video.width / 2) - ( _btn_repetir.width + espacio);			_btn_regresar.x = ( _video.width / 2) + espacio;						_btn_repetir.y = 80;			_btn_regresar.y = 80;						_square.removeEventListener(MouseEvent.MOUSE_DOWN, pauseVideo);						addChild(_btn_repetir);			addChild(_btn_regresar);			addChild(_mc_alerta)			_btn_repetir.alpha = 0;			_btn_regresar.alpha = 0;			_mc_alerta.alpha = 0;			_mc_alerta.x = ( _video.width / 2);			_mc_alerta.y = 500;						TweenMax.to(_btn_repetir, 1, {alpha:1});			TweenMax.to(_btn_regresar, 1, {alpha:1});						_btn_repetir.addEventListener(MouseEvent.MOUSE_DOWN, repeatVideo,false,0,true);			_btn_regresar.addEventListener(MouseEvent.MOUSE_DOWN, goIntro,false,0,true);						//Timer			_timer = new Timer(1000, SECONDS);  //solo defino la variable para el tiempo			timerON();       				}				//Start timer when the video come to the finish		private function timerON():void{					 trace("Iniciiando inactividad");						 stage.addEventListener(MouseEvent.MOUSE_MOVE,timerONmouse,false,0,true); 			 _timer.addEventListener(TimerEvent.TIMER_COMPLETE, mouseInactive,false,0,true);			 _timer.addEventListener(TimerEvent.TIMER, countDown);			 			 _timer.reset(); //si muevo el mouse antes de que finalice el conteo se reinicia			 _timer.start(); //si no se a iniciado el conteo, se inicia        }				//Start timer when the mouse is moving		private function timerONmouse(e:MouseEvent):void{		  			 trace("Iniciiando inactividad por mouse");			 			 _timer.addEventListener(TimerEvent.TIMER_COMPLETE, mouseInactive,false,0,true);			 _timer.addEventListener(TimerEvent.TIMER, countDown,false,0,true);			 			 _timer.reset(); //si muevo el mouse antes de que finalice el conteo se reinicia			 _timer.start(); //si no se a iniciado el conteo, se inicia			 _mc_alerta.alpha = 0;			 _mc_alerta.segundos.text = "5";        }				/*		public function set isVideoFinish(finish:Boolean):void {			   _isVideoFinish = finish;		}				public function get isVideoFinish():Boolean {			   return _isVideoFinish;		}		*/						//Start countdown		private function countDown(event:TimerEvent):void{					trace("countdown " + _timer.currentCount);								//Start countdown			if(_timer.currentCount == SECOND_START_COUNT_DOWN ){								_mc_alerta.alpha = 0;			    				TweenMax.to(_mc_alerta, 1, {alpha:1});			}else if( _timer.currentCount >= SECOND_START_COUNT_DOWN ){								_mc_alerta.segundos.text = SECONDS - _timer.currentCount;								}		}						//When finish the countdown	    private function mouseInactive(event:TimerEvent):void{			 			 /* Aqui va la accion que desean que ocurra si el mouse no se mueve */			 trace("Mouse inactivo!!!! vamos al intro!!");			 			 deleteTimer();			 			 goToIntroEfects();		}				private function deleteTimer():void{			//igual recomiendo siempre liberar la cache eliminando el listener del ciclo así:			_timer.stop();			 _timer.removeEventListener(TimerEvent.TIMER_COMPLETE, mouseInactive);			 stage.removeEventListener(MouseEvent.MOUSE_MOVE,timerONmouse); 		}								private function netStatusHandler(nse:NetStatusEvent):void {						// handles net status events			switch (nse.info.code) {				case "NetStream.Play.StreamNotFound" :					break;				case "NetStream.Play.Stop" :					//Finish Video					showButons();					break;				case "NetStream.Buffer.Full" :					break;				case "NetStream.Buffer.Empty" :					break;			}		}		private function onMetaData(p_info:Object):void {			for (var propName:String in p_info) {				//output_txt.appendText(propName + " = " + p_info[propName] + "\n");			}			_video.width = p_info.width;			_video.height = p_info.height;		}	}// end player	}